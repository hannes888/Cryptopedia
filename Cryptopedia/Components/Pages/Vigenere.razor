@page "/vigenere"
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Vigenère Cipher</PageTitle>

<h1>Vigenère Cipher</h1>

<p>Text to encrypt</p>
<textarea @bind="_userText" class="resizable-textarea" placeholder="Enter text to cipher..."></textarea>
<p>Provide an encryption key</p>
<input type="text" @bind="_encryptionKey" @oninput="ValidateKey" placeholder="Enter cipher key"/>
<br/>
<button class="btn btn-primary" @onclick="ApplyCipher">Apply cipher</button>

<p>Encrypted text</p>
<textarea readonly class="resizable-textarea">@_encryptedText</textarea>
<br/>
<button class="btn btn-secondary" style="margin-bottom: 18px" @onclick="CopyToClipboard">Copy to clipboard</button>

@code {
    private string _userText = string.Empty;
    private string _encryptedText = string.Empty;
    private string _encryptionKey = string.Empty;
    private const string Alphabet = "abcdefghijklmnopqrstuvwxyz";

    private void ApplyCipher()
    {
        _encryptionKey = _encryptionKey.ToLower();
        _userText = _userText.ToLower();
        _encryptedText = EncryptText(_userText);
    }

    private string EncryptText(string data)
    {
        var encryptedText = string.Empty;
        var keyCounter = 0;
        foreach (char character in data)
        {
            keyCounter %= _encryptionKey.Length - 1;
            if (Char.IsNumber(character))
            {
                encryptedText += character;
                continue;
            }

            var currentKeyChar = _encryptionKey[keyCounter];
            var offset = Alphabet.IndexOf(currentKeyChar);
            
            var charIndexInAlpha = Alphabet.IndexOf(character);
            var newIndex = (charIndexInAlpha + offset) % Alphabet.Length;

            encryptedText += Alphabet[newIndex];
            keyCounter++;
        }

        return encryptedText;
    }
    
    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _encryptedText);
    }

    private void ValidateKey(ChangeEventArgs e)
    {
        var key = e.Value?.ToString() ?? string.Empty;
        _encryptionKey = new string(key.Where(char.IsLetter).ToArray());;
    }

}