@page "/caesar"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Caesar</PageTitle>

<h1>Caesar's Cipher</h1>

<p>Text to encrypt</p>
<textarea @bind="_userText" class="resizable-textarea" placeholder="Enter text to cipher..."></textarea>
<p>Select offset between 0-26</p>
<input type="number" max="@Alphabet.Length" min="0" @bind="_cipherOffset" @oninput="ValidateOffset" placeholder="Enter cipher offset"/>
<br/>
<button class="btn btn-primary" @onclick="ApplyCipher">Apply cipher</button>

<p>Encrypted text</p>
<textarea readonly class="resizable-textarea">@_encryptedText</textarea>
<br/>
<button class="btn btn-secondary" style="margin-bottom: 18px" @onclick="CopyToClipboard">Copy to clipboard</button>

@code {
    private string _userText = string.Empty;
    private string _encryptedText = string.Empty;
    private int _cipherOffset = 0;
    private const string Alphabet = "abcdefghijklmnopqrstuvwxyz";

    private void ApplyCipher()
    {
        _encryptedText = EncryptText(_userText, _cipherOffset);
    }

    private static string EncryptText(string data, int offset)
    {
        string encryptedText = string.Empty;
        foreach (char character in data)
        {
            if (Char.IsNumber(character))
            {
                encryptedText += character;
                continue;
            }
            int charIndexInAlpha = Alphabet.IndexOf(character);
            int newIndex = charIndexInAlpha + offset;
            if (charIndexInAlpha + offset > Alphabet.Length - 1)
            {
                newIndex -= Alphabet.Length;
            }

            encryptedText += Alphabet[newIndex];
        }

        return encryptedText;
    }
    
    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _encryptedText);
    }

    private void ValidateOffset(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int offset))
        {
            if (offset < 0 || offset > Alphabet.Length)
            {
                _cipherOffset = 0; 
            }
            else
            {
                _cipherOffset = offset;
            }
        }
    }

}